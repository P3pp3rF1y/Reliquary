// This simple grabs the latest 'forge' plugin, or ForgeGradle, from Forge's servers.
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1+"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.5"
}

// We apply the 'forge' plugin, so ForgeGradle can do it's stuff.
apply plugin: 'net.minecraftforge.gradle.forge'

repositories {
    maven { url "http://dvs1.progwml6.com/files/maven" }
    maven { url "http://mobiusstrip.eu/maven" }
    maven { url 'http://tehnut.info/maven/' }
    ivy {
        name "JustEnoughResources"
        artifactPattern "http://addons-origin.cursecdn.com/files/${jer_cf}/[module]-[revision].[ext]"
    }
    ivy {
        name "Baubles"
        artifactPattern "http://addons-origin.cursecdn.com/files/${baubles_cf}/[module]-[revision].[ext]"
    }
    ivy {
        name "Thaumcraft"
        artifactPattern "http://addons-origin.cursecdn.com/files/${thaumcraft_cf}/[module]-[revision].[ext]"
    }
    ivy {
        name "BloodMagic"
        artifactPattern "http://addons-origin.cursecdn.com/files/${blood_magic_cf}/[module]-[revision].[ext]"
    }
}




group = 'xreliquary' // Your main package.
version = "${minecraft_version}-${mod_version}.${getBuildNumber()}${getStable()}"
archivesBaseName = 'Reliquary'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    deobfCompile "mezz.jei:jei_${minecraft_version}:${jei_version}"
    //deobfCompile "slimeknights.mantle:Mantle:${mantle_version}"
    //deobfCompile "slimeknights:TConstruct:${tconstruct_version}"
    //deobfCompile "info.amerifrance.guideapi:Guide-API:${guideapi_version}"
    //compile "mcp.mobius.waila:Waila:${waila_version}:dev"
    compile name: 'JustEnoughResources', version: jer_version, ext: 'jar'
    //compile name: 'Baubles', version: baubles_version, ext: 'jar'
    //compile name: 'BloodMagic', version: blood_magic_version, ext: 'jar'
    //compile name:'Thaumcraft', version: thaumcraft_version, ext: 'jar'
    //compile name:'TConstruct', version: tconstruct_version, ext: 'jar'

    testCompile 'org.testng:testng:6.9.10'
    testCompile "org.mockito:mockito-core:1.+"
    testCompile "org.powermock:powermock-mockito-release-full:1.6.2"
}

test {
    useTestNG()
}

minecraft {
    version = minecraft_version + "-" + forge_version
    mappings = mcp_mappings
    runDir = "run"
    replaceIn "reference/Reference.java"
    replace "@MOD_VERSION@", "${project.version}"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "project_version", project.version
    inputs.property "minecraft_version", minecraft_version

    // Replace stuff in mcmod.info and in .lang files, nothing else.
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // Replace version and mcversion.
        expand 'project_version': project.version, 'minecraft_version': minecraft_version
    }

    // Copy everything else that wasn't replaced.
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

def getBuildNumber() {
    if (System.getenv("DRONE_BUILD_NUMBER") != null) {
        return "${System.getenv("DRONE_BUILD_NUMBER")}"
    }

    if (System.getenv("TRAVIS_BUILD_NUMBER") != null) {
        return (Integer.parseInt(System.getenv("TRAVIS_BUILD_NUMBER")) + 500).toString() //hack to continue with build numbers on Travis
    }
    return ""
}

def getStable() {
    if ((System.getenv("DRONE_BRANCH") == null || System.getenv("DRONE_BRANCH").endsWith("-dev"))
            && (System.getenv("TRAVIS_BRANCH") == null || System.getenv("TRAVIS_BRANCH").endsWith("-dev"))) {
        return "unstable"
    }
    return ""
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publish = true
    filesSpec {
        from 'build/libs'
        into '.'
        exclude '*sources.jar'
    }
    pkg {
        version {
            name = "${mod_version}"
            released = new Date()
        }
        repo = 'maven'
        name = 'Reliquary'
        licenses = ['GPL-3.0']
        vcsUrl = 'https://github.com/P3pp3rF1y/Reliquary.git'
    }

}

